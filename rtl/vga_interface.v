/*
module: vga_interface

This module is responsible for any top-level transactions related to VGA display.

It operates in the 25 MHz clock domain.

Its primary function is to request display data in accordance with timing
generated by its VTC.
*/

module vga_interface 
	#(parameter FIFO_AW = 4)
	(
	input wire                i_clk,  // 25MHz pixel clock
	input wire                i_rstn,

	// Async FIFO Read Interface
	output reg                o_rd,
	input  wire [15:0]        i_data,
	input  wire               i_empty,
	
	// VGA Interface
	output reg                o_vsync, 
	output reg                o_hsync, 
	output reg  [4:0]         o_red,   // RGB 565
	output reg  [5:0]         o_green,
	output reg  [4:0]         o_blue
	);

	// VTC
	wire vsync;
	wire hsync;
	wire active;
	wire [9:0] counterX;
	wire [9:0] counterY;

	// FSM
	reg STATE;
	reg NEXT_STATE;

	localparam STATE_INITIAL = 1,
	           STATE_ACTIVE  = 2;

	// Next State
	reg nxt_rd;


// **** Instantiate VTC ****
//
	vtc vtc_inst(
	.i_clk      (i_clk),
	.i_rstn     (i_rstn),
	.o_vsync    (o_vsync),
	.o_hsync    (o_hsync),
	.o_active   (active),
	.o_counterX (counterX),
	.o_counterY (counterY)
	);

// **** Next State Logic  ****
//
	always@* begin
		// FIFO control
		nxt_rd       = 0;

		nxt_vsync    = vsync;
		nxt_hsync    = hsync;
		nxt_red      = 0;
		nxt_green    = 0;
		nxt_blue     = 0;

		NEXT_STATE = STATE;

		case(STATE)

		// - Initial state; wait one frame to allow
		//                  for camera configuration 
			STATE_INITIAL: begin
				if((counterX == 1) && (counterY == 1)) begin
					NEXT_STATE = STATE_IDLE;
				end
			end

		// - Active state; at start of active display area
		//                 read the FIFO and assign output data
			STATE_ACTIVE: begin
				if(active && !i_empty) begin
					nxt_rd    = 1;
					nxt_red   = i_data[15:11];
					nxt_green = i_data[10:5];
					nxt_blue  = i_data[4:0];
				end
			end
		endcase
	end

// **** ****
//
	always@(posedge i_clk) begin
		if(!i_rstn) begin
			o_rd    <= 0;
			o_vsync <= 0;
			o_hsync <= 0;
			o_red   <= 0;
			o_green <= 0;
			o_blue  <= 0;
			STATE   <= STATE_INITIAL;
		end
		else begin
			o_rd    <= 1;
			o_vsync <= nxt_vsync;
			o_hsync <= nxt_hsync;
			o_red   <= nxt_red;
			o_green <= nxt_green;
			o_blue  <= nxt_blue;
			STATE   <= NEXT_STATE;
		end
	end


	

endmodule // vga_top